"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferenceFactory = exports.Inference = void 0;
class Inference {
    constructor(rawPrediction) {
        this.pages = [];
        this.extras = [];
        this.isRotationApplied = rawPrediction["is_rotation_applied"] ?? undefined;
        this.product = rawPrediction["product"];
    }
    toString() {
        return `Inference
#########
:Product: ${this.product.name} v${this.product.version}
:Rotation applied: ${this.isRotationApplied ? "Yes" : "No"}

Prediction
==========
${this.prediction.toString() || ""}

Page Predictions
================

${this.pages.map((e) => e.toString() || "").join("\n")}`;
    }
    static cleanOutString(outStr) {
        const lines = / \n/gm;
        return outStr.replace(lines, "\n");
    }
}
exports.Inference = Inference;
class InferenceFactory {
    /**
     * Builds a blank product of the given type & sends back the endpointName & endpointVersion parameters of OTS classes.
     * Note: this is needed to avoid passing anything other than the class of the object to the parse()/enqueue() call.
     * @param inferenceClass Class of the product we are using
     * @returns {Inference} An empty instance of a given product.
     */
    static getEndpoint(inferenceClass) {
        if (inferenceClass.name === "CustomV1") {
            throw new Error("Cannot process custom endpoint as OTS API endpoints. Please provide an endpoint name & version manually.");
        }
        const emptyProduct = new inferenceClass({
            prediction: {},
            pages: [],
        });
        if (!emptyProduct.endpointName ||
            !emptyProduct.endpointVersion ||
            emptyProduct.endpointName.length === 0 ||
            emptyProduct.endpointVersion.length === 0) {
            throw new Error(`Error during endpoint verification, no endpoint found for product ${inferenceClass.name}.`);
        }
        return [emptyProduct.endpointName, emptyProduct.endpointVersion];
    }
}
exports.InferenceFactory = InferenceFactory;
