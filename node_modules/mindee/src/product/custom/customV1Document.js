"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomV1Document = void 0;
const common_1 = require("../../parsing/common");
const custom_1 = require("../../parsing/custom");
class CustomV1Document {
    constructor(rawPrediction, pageId) {
        this.fields = new Map();
        this.classifications = new Map();
        Object.entries(rawPrediction).forEach(([fieldName, fieldValue]) => {
            this.setField(fieldName, fieldValue, pageId);
        });
    }
    setField(fieldName, fieldValue, pageId) {
        // Currently, two types of fields possible in a custom API response:
        // fields having a list of values, and classification fields.
        if (fieldValue && fieldValue["values"] !== undefined) {
            // Only value lists have the 'values' attribute.
            this.fields.set(fieldName, new custom_1.ListField({
                prediction: fieldValue,
                pageId: pageId,
            }));
        }
        else if (fieldValue && fieldValue["value"] !== undefined) {
            // Only classifications have the 'value' attribute.
            this.classifications.set(fieldName, new custom_1.ClassificationField({ prediction: fieldValue }));
        }
        else {
            throw new Error(`Unknown API field type for field ${fieldName} : ${fieldValue}`);
        }
    }
    toString() {
        let outStr = "";
        this.classifications.forEach((fieldData, name) => {
            outStr += `:${name}: ${fieldData}\n`;
        });
        this.fields.forEach((fieldData, name) => {
            outStr += `:${name}: ${fieldData}\n`;
        });
        return (0, common_1.cleanOutString)(outStr).trimEnd();
    }
}
exports.CustomV1Document = CustomV1Document;
